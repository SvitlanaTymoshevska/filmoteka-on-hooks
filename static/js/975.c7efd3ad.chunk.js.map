{"version":3,"file":"static/js/975.c7efd3ad.chunk.js","mappings":"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","sources":["services/api-films-service.js","components/FilmGallery/FilmGallery.Styled.jsx","components/FilmCard/FilmCard.styled.jsx","components/FilmCard/FilmCard.jsx","components/FilmGallery/FilmGallery.jsx","components/Pagination/usePagination.jsx","components/Pagination/Pagination.styled.jsx","components/Pagination/Pagination.jsx","pages/Home.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = '115b567d77b04428b1251a93b22d9778';\n\nexport async function fetchFilms (page, query) {  \n    let URL = \"\";\n    if (query) {\n        URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`;\n    } else {\n        URL = `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}&page=${page}`;\n    }\n\n    const response = await axios.get(URL);\n    const results = response.data.results;\n\n    if (results.length === 0 && query) {\n      throw new Error();\n    }\n\n    return [results, response.data.total_pages];\n}\n\nexport async function fetchGenres() {\n    const URL = `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(URL);\n\n    return response.data.genres;\n}","import styled from \"styled-components\";\nimport { theme } from \"constants/theme\";\n\nexport const Wrapper = styled.section`\n  position: relative;\n  flex-grow: 1;\n`;\n\nexport const Container = styled.div`\n  max-width: 320px;\n  margin: 0 auto;\n  padding: 20px 20px 40px;\n  line-height: 1.35;\n\n  @media screen and (min-width: 768px) {\n    max-width: 768px;\n    padding: 60px 32px 60px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    max-width: 1280px;\n    font-size: 20px;\n    line-height: 1.2;\n  }\n`;\n\nexport const Message = styled.p`\n  position: absolute;\n  top: -60px;\n  left: 50%;\n  transform: translate(-50%,-50%);\n  display: block; \n  text-align: center;\n  \n  color: ${theme.colors.warning};\n  font-weight: 400;\n  font-size: 14px;\n\n  @media screen and (min-width: 768px) {\n    top: -48px;\n  }\n`;\n\nexport const GalleryTitle = styled.h2`\n  display: none;\n`;\n\nexport const Gallery = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 32px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    column-gap: 16px;\n  }\n`;","import styled from \"styled-components\";\nimport { theme } from \"constants/theme\";\n\nexport const Card = styled.li`\n  transition: box-shadow ${theme.transition.durationFunction};\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 32px) / 2);\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: calc((100% - 32px) / 3);\n  }\n\n  &:hover {\n    cursor: pointer;\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12),\n      0px 4px 4px rgba(0, 0, 0, 0.06), 1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n`;\n\nexport const Img = styled.img`\n  display: block;\n  width: 100%;\n  height: 398px;\n  border-radius: 5px;\n  margin-bottom: 10px;\n  object-fit: cover;\n\n  @media screen and (min-width: 768px) {\n    height: 455px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-bottom: 12px;\n    height: 574px;\n  }\n`;\n\nexport const Plug = styled.div`\n  height: 398px;\n  margin-bottom: 10px;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${theme.colors.backgroundHeader};\n\n  @media screen and (min-width: 768px) {\n    height: 455px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-bottom: 12px;\n    height: 574px;\n  }\n`;\n\nexport const Info = styled.div`\n  padding: 0px 5px 5px;\n`;\n\nexport const Title = styled.h2`\n  margin: 0;\n  text-transform: uppercase;\n  line-height: 1.35;\n  font-size: 12px;\n  font-weight: 500;\n\n  @media screen and (min-width: 1280px) {\n    font-size: 20px;\n    line-height: 1.2;\n  }\n`;\n\nexport const Genres = styled.p`\ncolor: ${theme.colors.accent};\n`;","import PropTypes from \"prop-types\";\nimport { Card, Img, Plug, Info, Title, Genres } from \"components/FilmCard/FilmCard.styled\";\n\nexport const FilmCard = ({ film }) => {\n  const { poster_path, title, genre_ids, release_date } = film;\n  \n  const poster = poster_path ? (\n    <Img\n          srcSet={`\n              https://image.tmdb.org/t/p/w300/${poster_path}     300w,\n              https://image.tmdb.org/t/p/w500/${poster_path}     500w,\n              https://image.tmdb.org/t/p/w780/${poster_path}     780w,\n              https://image.tmdb.org/t/p/w1280/${poster_path}    1280w,\n              https://image.tmdb.org/t/p/original/${poster_path} 2000w\n          `}\n          loading=\"lazy\"\n          src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n          alt={`Poster of the film ${title}`}\n          sizes=\"(max-width: 320px) 280px, (max-width: 768px) 340px, 400px\"\n    />\n  ) : <Plug>Poster not found</Plug>;   \n\n  return (\n    <Card>\n      {poster}\n      <Info>\n        <Title>{title}</Title>\n        <Genres>{genresList(genre_ids)}{year(release_date)}</Genres>\n      </Info>\n    </Card>\n  );\n};\n\nFilmCard.propType = {\n  film: PropTypes.shape({\n    genre_ids: PropTypes.arrayOf(PropTypes.number),\n    poster_path: PropTypes.string,\n    release_date: PropTypes.string,\n    title: PropTypes.string.isRequired,\n  }),\n};\n\nconst genresList = (filmGenresID) => {\n  const genresArray = JSON.parse(localStorage.getItem('genres'));\n  if (!genresArray) {\n      return \"unknown\";\n  }\n  \n  const filtredGenresArray = filmGenresID.map(genreID => genresArray.find(genre => genre.id === genreID).name);\n  let cuttedGenresArray = [];\n\n  if (filtredGenresArray.length > 2) {\n    cuttedGenresArray = [...filtredGenresArray.slice(0, 2), \"Otheres\"];\n  } else {\n    cuttedGenresArray = [...filtredGenresArray];\n  };\n\n  return cuttedGenresArray.join(\", \");\n}\n\nconst year = (release_date) => {\n  let year = '';\n  if (!release_date) {\n    return year;\n  }\n  year = ' | ' + release_date?.slice(0, 4);\n  return year;\n}","import PropTypes from \"prop-types\";\nimport { Wrapper, Container, Message, GalleryTitle, Gallery } from \"components/FilmGallery/FilmGallery.Styled\";\nimport { FilmCard } from \"components/FilmCard/FilmCard\";\n\nexport const FilmList = ({error, films}) => {\n    return (\n        <Wrapper>\n            <GalleryTitle>Films gallery</GalleryTitle>\n            {error &&\n                <Message>\n                    Search result not successful. Enter the correct movie name and repeat.\n                </Message>}            \n            <Container>\n                <Gallery>\n                    {films.map((film) => { \n                        return (\n                            <FilmCard\n                                key={film.id}\n                                film={film}\n                            />\n                        )              \n                    })}\n                </Gallery>\n            </Container>\n        </Wrapper>\n    );\n};\n\nFilmList.propType = {\n    error: PropTypes.string,\n    film: PropTypes.shape({\n        genre_ids: PropTypes.arrayOf(PropTypes.number),  \n        id: PropTypes.number.isRequired,\n        poster_path: PropTypes.string,\n        release_date: PropTypes.string,\n        title: PropTypes.string.isRequired,\n  }),\n};","import { useMemo } from \"react\";\n\nconst range = (start, end) => {\n    let length = end - start + 1;\n    /*\n        Create an array of certain length and set the elements within it from\n        start value to end value.\n    */\n    return Array.from({ length }, (_, idx) => idx + start);\n};\n\nexport const dotsBefore = \"<...\";\nexport const dotsAfter = \"...>\";\nexport const usePagination = ({\n    currentPage,\n    totalPageCount,\n    siblingCount = 1\n}) => {\n    const paginationRange = useMemo(() => {\n        // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\n        const totalPageNumbers = siblingCount + 5;\n\n    // Case 1:\n        // If the number of pages is less than the page numbers we want to show in our paginationComponent, we return the range [1..totalPageCount]\n        if (totalPageNumbers >= totalPageCount) {\n            return range(1, totalPageCount);\n        }\n\n        // Calculate left and right sibling index and make sure they are within range 1 and totalPageCount\n        const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n        const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n\n        // We do not show dots just when there is just one page number to be inserted between the extremes of sibling and the page limits i.e 1 and totalPageCount. \n        // Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\n        const shouldShowLeftDots = leftSiblingIndex > 2;\n        const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n\n        const firstPageIndex = 1;\n        const lastPageIndex = totalPageCount;\n\n    // Case 2: No left dots to show, but rights dots to be shown\n        if (!shouldShowLeftDots && shouldShowRightDots) {\n            let leftItemCount = 3 + 2 * siblingCount;\n            let leftRange = range(1, leftItemCount);\n            return [...leftRange, dotsAfter, totalPageCount];\n        }\n\n    // Case 3: No right dots to show, but left dots to be shown\n        if (shouldShowLeftDots && !shouldShowRightDots) {\n            let rightItemCount = 3 + 2 * siblingCount;\n            let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n            return [firstPageIndex, dotsBefore, ...rightRange];\n        }\n        \n    // Case 4: Both left and right dots to be shown\n        if (shouldShowLeftDots && shouldShowRightDots) {\n            let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n            return [firstPageIndex, dotsBefore, ...middleRange, dotsAfter, lastPageIndex];\n        }\n\n    }, [currentPage, totalPageCount, siblingCount]);\n\n    return paginationRange;\n};","import styled from \"styled-components\";\nimport { theme } from \"constants/theme\";\n\nexport const Container = styled.ul`\n    display: flex;\n    justify-content: center;\n    margin-bottom: 40px;\n\n    @media screen and (min-width: 768px) {\n        margin-bottom: 60px;\n    }\n`;\n\nexport const Item = styled.li`\n    min-height: 40px;\n    min-width: 40px;\n\n    &:not(:last-child) {\n        margin-right: 6px;\n        \n        @media screen and (min-width: 768px) {\n            margin-right: 8px;\n        }\n    }\n`;\n\nexport const Arrow = styled.li`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 40px;\n    min-width: 40px;\n    border-radius: 5px;\n    background-color: #f7f7f7;\n    \n    &:hover,\n    &:focus {\n        cursor: pointer;\n        color: ${theme.colors.accent};\n    }\n`;\n\nexport const Number = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n    border-radius: 5px;\n\n    text-align: center;\n    font-size: 12px;\n    font-weight: 500;\n    line-height: 1.33;\n    background-color: ${({ current }) => current ? theme.colors.accent : \"transparent\"};\n    color: ${({ current }) => current ? theme.colors.main : \"inherit\"};\n\n    &:hover,\n    &:focus {\n        cursor: pointer;\n        color: ${theme.colors.accent};\n    }\n`;\n\nexport const Dots = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n    border-radius: 5px;\n`;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { usePagination, dotsBefore,  dotsAfter} from \"components/Pagination/usePagination\";\nimport { IoIosArrowRoundBack, IoIosMore, IoIosArrowRoundForward, } from \"react-icons/io\";\nimport { Container, Item, Number, Dots, Arrow } from \"components/Pagination/Pagination.styled\";\n\nexport const Pagination = ({currentPage, totalPageCount, onPageChange}) => {\n\n    const paginationRange = usePagination({currentPage, totalPageCount});\n\n    if (currentPage === 0 || paginationRange.length < 2) {\n        return null;\n    }\n\n    const onNext = () => {\n        onPageChange(currentPage + 1);\n    };\n\n    const onPrevious = () => {\n        onPageChange(currentPage - 1);\n    };\n\n    let lastPage = paginationRange[paginationRange.length - 1];\n\n    return (\n        <Container >\n            {currentPage !== 1 &&\n                <Arrow onClick={onPrevious}>\n                    <IoIosArrowRoundBack size={20}/>\n                </Arrow>}\n            \n            {paginationRange.map(pageNumber => {\n                return (\n                    <Item key={pageNumber}>\n                        {pageNumber === dotsBefore || pageNumber === dotsAfter\n                            ? <Dots><IoIosMore /></Dots>\n                            : <Number\n                                current={pageNumber === currentPage}\n                                onClick={() => onPageChange(pageNumber)}>\n                                {pageNumber}\n                            </Number>\n                        }\n                    </Item>\n                );\n            })}\n            {currentPage !== lastPage &&\n                <Arrow onClick={onNext}>\n                    <IoIosArrowRoundForward size={20} />\n                </Arrow>}\n        </Container>\n    );\n};\n\nPagination.propTypes = {\n    currentPage: PropTypes.number.isRequired,\n    totalPageCount: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n};","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\n\nimport { fetchGenres, fetchFilms } from \"services/api-films-service\";\n\nimport { FilmList } from \"components/FilmGallery/FilmGallery\";\nimport { Pagination } from \"components/Pagination/Pagination\";\n\n\nconst Home = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get(\"query\") ?? \"\";\n    const page = searchParams.get(\"page\") ?? \"1\";\n\n    const [films, setFilms] = useState([]);\n    const [totalPages, setTotalPages] = useState(1);\n    const [error, setError] = useState(false);\n\n    // Fetching genres\n    useEffect(() => {\n        async function getGenres() {\n            try {\n                const genres = await fetchGenres();\n                localStorage.setItem('genres', JSON.stringify(genres));\n            } catch (error) {\n                console.log(error.message);\n            }\n        };\n        getGenres();\n    }, []);\n    \n    // Fetching films\n    useEffect(() => {\n        async function getFilms() {\n            try {\n                const [films,  totalPages] = await fetchFilms(Number(page), query);\n                setFilms(films);\n                setTotalPages(totalPages);\n            } catch (error) {\n                setError(true);\n            }\n        };\n        getFilms();\n    }, [page, query]);\n\n    // Delete the error message\n    useEffect(() => {\n        if (error) {\n            setSearchParams({});\n            setTimeout(() => {setError(false) }, 3000);\n        }  \n    }, [error, setSearchParams]);\n\n    return (\n        films &&\n            <>  \n                <FilmList\n                    error={error}\n                    films={films}/>\n                <Pagination\n                    currentPage={Number(page)}\n                    totalPageCount={totalPages}\n                    onPageChange={page => setSearchParams(query !== \"\" ? { query, page } : { page })}/>\n            </>\n    );\n};\n\nexport default Home;"],"names":["API_KEY","fetchFilms","page","query","URL","axios","response","results","data","length","Error","total_pages","fetchGenres","genres","Wrapper","styled","Container","Message","theme","GalleryTitle","Gallery","Card","Img","Plug","Info","Title","Genres","FilmCard","film","poster_path","title","genre_ids","release_date","poster","srcSet","loading","src","alt","sizes","genresList","year","propType","PropTypes","filmGenresID","genresArray","JSON","parse","localStorage","getItem","filtredGenresArray","map","genreID","find","genre","id","name","slice","join","FilmList","error","films","range","start","end","Array","from","_","idx","dotsBefore","dotsAfter","Item","Arrow","Number","current","Dots","Pagination","currentPage","totalPageCount","onPageChange","paginationRange","siblingCount","useMemo","leftSiblingIndex","Math","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftRange","rightRange","middleRange","usePagination","lastPage","onClick","size","pageNumber","useSearchParams","searchParams","setSearchParams","get","useState","setFilms","totalPages","setTotalPages","setError","useEffect","setItem","stringify","console","log","message","getGenres","getFilms","setTimeout"],"sourceRoot":""}