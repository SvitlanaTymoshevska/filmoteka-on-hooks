{"version":3,"file":"static/js/736.98241015.chunk.js","mappings":"6PAEaA,EAAOC,EAAAA,GAAAA,GAAH,qFAMJC,EAAOD,EAAAA,GAAAA,GAAH,gEAKJE,EAAMF,EAAAA,GAAAA,IAAH,gHAOHG,EAAOH,EAAAA,GAAAA,IAAH,yIAQJI,EAASJ,EAAAA,GAAAA,EAAH,+C,SC+BnB,EAtCa,WACT,IAAQK,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEIC,EAAa,KAYjB,OAVIF,IACAE,EAvBc,SAACF,GAanB,OAZaA,EAAKG,QAAO,SAACC,EAAKC,GAC3B,OAAID,EAAIE,IAAID,EAAMR,MAGlBO,EAAIE,IAAID,EAAMR,KAAM,EACpBO,EAAIG,OAAOC,KAAKH,IAHTD,CAKV,GAAE,CACCE,IAAK,CAAC,EACNC,OAAQ,KACTA,MAGN,CASoBE,CAAcT,KAG/BU,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,GAAUd,GAAIe,MAAK,SAAAC,GACfZ,EAAQY,EACX,GACJ,GAAE,CAAChB,IAGAK,IACI,SAACX,EAAD,UACKW,EAAWI,KAAI,YAA4C,IAAzCT,EAAwC,EAAxCA,GAAIiB,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACpC,OACI,UAACvB,EAAD,WACKuB,GAAgB,SAACtB,EAAD,CACbuB,IAAG,2CAAsCD,GACzCE,IAAG,oBAAeH,GAClBI,QAAQ,UACL,SAACxB,EAAD,gCAEP,SAACC,EAAD,UAASmB,KACT,uCAAeD,OARRjB,EAWlB,KAIhB,C,kMCvDKuB,EAAU,mCAET,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA2BC,EAAMC,GAAjC,kFACCC,EAAM,GAENA,EADAD,EACG,4DAAwDH,EAAxD,kBAAyEG,EAAzE,iBAAuFD,GAEvF,kEAA8DF,EAA9D,iBAA8EE,GALlF,SAQoBG,EAAAA,EAAAA,IAAUD,GAR9B,UAQGE,EARH,OAWoB,KAFjBC,EAAUD,EAASE,KAAKD,SAElBE,SAAgBN,EAXzB,sBAYK,IAAIO,MAZT,gCAeI,CAACH,EAASD,EAASE,KAAKG,cAf5B,kEAkBA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6FACGR,EADH,gEACkEJ,EADlE,4BAEoBK,EAAAA,EAAAA,IAAUD,GAF9B,cAEGE,EAFH,yBAIIA,EAASE,KAAKK,QAJlB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BrC,GAA7B,gFACG2B,EADH,6CAC+C3B,EAD/C,oBAC6DuB,EAD7D,4BAEoBK,EAAAA,EAAAA,IAAUD,GAF9B,cAEGE,EAFH,yBAIIA,EAASE,MAJb,kEAOA,SAAejB,EAAtB,+CAAO,OAAP,oBAAO,WAAyBd,GAAzB,gFACG2B,EADH,6CAC+C3B,EAD/C,4BACqEuB,EADrE,4BAEoBK,EAAAA,EAAAA,IAAUD,GAF9B,cAEGE,EAFH,yBAIIA,EAASE,KAAK5B,MAJlB,kEAQA,SAAemC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BtC,GAA5B,kFACG2B,EADH,6CAC+C3B,EAD/C,4BACqEuB,EADrE,mCAEoBK,EAAAA,EAAAA,IAAUD,GAF9B,UAEGE,EAFH,OAKoB,KAFjBC,EAAUD,EAASE,KAAKD,SAElBE,OALT,sBAMK,IAAIC,MAAM,6CANf,gCAQIH,GARJ,kE","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api-films-service.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    margin: 10px;\n`;\n\nexport const Item = styled.li`\n    margin: 10px;  \n    width: 140px;\n`;\n\nexport const Img = styled.img`\n    width: 140px;\n    height: 210px;\n    border-radius: 5px;\n    object-fit: cover;\n`;\n\nexport const Plug = styled.div`\n    width: 120px;\n    height: 190px;\n    padding: 10px;\n    border-radius: 5px;\n    background-color: grey;\n`;\n\nexport const Accent = styled.p`\n   font-weight: bold;\n`;","import { useEffect, useState } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { fetchCast } from \"services/api-films-service\";\nimport { List, Item, Img, Plug, Accent } from \"components/Cast/Cast.styled\";\n\nconst getUniqueCast = (cast) => {\n    let actors = cast.reduce((acc, actor) => {\n        if (acc.map[actor.id]) // если данный актер уже был\n        return acc; // ничего не делаем, возвращаем уже собранное\n\n        acc.map[actor.id] = true; // помечаем актера, как обработанный\n        acc.actors.push(actor); // добавляем объект в массив актеров\n        return acc; // возвращаем собранное\n    }, {\n        map: {}, // здесь будут отмечаться обработанные актеры\n        actors: [] // здесь конечный массив уникальных актерев\n    }).actors; // получаем конечный массив\n    \n    return actors;\n};\n\nconst Cast = () => {\n    const { id } = useParams();\n    const [cast, setCast] = useState(null);\n\n    let uniqueCast = null;\n\n    if (cast) {\n        uniqueCast = getUniqueCast(cast);\n    }\n    \n    useEffect(() => {\n        fetchCast(id).then(filmCast => {\n            setCast(filmCast);\n        });\n    }, [id]);\n\n    return (\n        uniqueCast && (\n            <List>\n                {uniqueCast.map(({ id, character, name, profile_path }) => { \n                    return (\n                        <Item key={id}>\n                            {profile_path ? (<Img\n                                src={`https://image.tmdb.org/t/p/w1280/${profile_path}`}\n                                alt={`Poster of ${name}`}\n                                loading=\"lazy\"\n                            />) :  <Plug>Poster not found</Plug>}\n                            \n                            <Accent>{name}</Accent>\n                            <p>Character: {character}</p>\n                        </Item>\n                    )\n                })}   \n            </List>  \n        )\n    );\n};\n\nexport default Cast;","import axios from \"axios\";\n\nconst API_KEY = '115b567d77b04428b1251a93b22d9778';\n\nexport async function fetchFilms (page, query) {  \n    let URL = \"\";\n    if (query) {\n        URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`;\n    } else {\n        URL = `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}&page=${page}`;\n    }\n\n    const response = await axios.get(URL);\n    const results = response.data.results;\n\n    if (results.length === 0 && query) {\n      throw new Error();\n    }\n\n    return [results, response.data.total_pages];\n}\n\nexport async function fetchGenres() {\n    const URL = `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(URL);\n\n    return response.data.genres;\n}\n\nexport async function fetchFilmByID(id) {\n    const URL = `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(URL);\n\n    return response.data;\n}\n\nexport async function fetchCast(id) {\n    const URL = `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(URL);\n\n    return response.data.cast;\n;\n}\n\nexport async function fetchReviews(id) {\n    const URL = `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n    const response = await axios.get(URL);\n    const results = response.data.results;\n\n    if (results.length === 0) {\n      throw new Error(\"We don't have any reviews for this movie.\");\n    }\n    return results;\n;\n}"],"names":["List","styled","Item","Img","Plug","Accent","id","useParams","useState","cast","setCast","uniqueCast","reduce","acc","actor","map","actors","push","getUniqueCast","useEffect","fetchCast","then","filmCast","character","name","profile_path","src","alt","loading","API_KEY","fetchFilms","page","query","URL","axios","response","results","data","length","Error","total_pages","fetchGenres","genres","fetchFilmByID","fetchReviews"],"sourceRoot":""}